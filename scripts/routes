#!/usr/bin/env escript
%% -*- erlang -*-
%%! -pa ebin deps/*/ebin

main(_) ->
    Handlers = [H || {H, _} <- get_value(handlers, leptus:config(), [])],
    F = fun(H) ->
                F1 = fun(R) ->
                             print(H, R)
                     end,
                lists:foreach(F1, H:routes())
        end,
    io:fwrite("~-30s ~-44s ~15s~n", ["Handler", "Route", "Allowed methods"]),
    io:fwrite("~.98c~n~n", [$=]),
    lists:foreach(F, Handlers).

print(Handler, Route) ->
    Terms = [Handler, Route, allowed_methods(Handler, Route)],
    io:fwrite("~-30s ~-44s ~-22s~n", Terms).

allowed_methods(Handler, Route) ->
    Methods = Handler:allowed_methods(Route),
    <<", ", Allow/binary>> = << <<", ", M/binary>> || M <- Methods >>,
    Allow.

get_value(Key, Proplist, Default) ->
    case lists:keyfind(Key, 1, Proplist) of
        {_, Value} -> Value;
        _ -> Default
    end.
